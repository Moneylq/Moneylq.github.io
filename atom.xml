<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dalin大林</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-01T01:23:20.276Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Dalin大林</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring+jdbcTemplate实现对数据库的增删改查</title>
    <link href="http://yoursite.com/2018/03/01/Spring-jdbcTemplate%E5%AE%9E%E7%8E%B0%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://yoursite.com/2018/03/01/Spring-jdbcTemplate实现对数据库的增删改查/</id>
    <published>2018-03-01T01:16:50.000Z</published>
    <updated>2018-03-01T01:23:20.276Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Spring中有很多概念性的内容，需要我们去花些时间去搞懂，这里只列出Spring的大纲，网上有很多写的很详细的文章，不再赘述<br> IOC ：<a href="http://blog.csdn.net/qq_22654611/article/details/52606960/" target="_blank" rel="noopener">推荐这篇文章_谈谈对Spring IOC 的理解</a><br> AOP ： <a href="http://www.cnblogs.com/xrq730/p/4919025.html" target="_blank" rel="noopener">推荐这篇文章_Spring AOP详解</a><br> 具体的搞懂下面这些东西，就会对SpringIOC和AOP有一些初步的了解了</p><ul><li>1.如何创建SpringIOC容器对象</li><li>2.获取bean对象的两种方式</li><li>3.通过属性注入的方式配置bean</li><li>4.如何应用其它bean</li><li>5.通过引入外部属性文件来配置数据源</li><li>6.Spring中四个组件注解以及实现自动注入的注解</li><li>7.AOP术语，切入点表达式的表示方式，五种通知</li><li>8.声明切入点表达式，设置切面的优先级</li><li>9.Spring中声明事务，事务的属性</li></ul></blockquote><hr><p>下面就用jdbcTemplate来实现一个简单的增删改查的功能</p><h4 id="首先是对创建Module及对工程的配置"><a href="#首先是对创建Module及对工程的配置" class="headerlink" title="首先是对创建Module及对工程的配置"></a>首先是对创建Module及对工程的配置</h4><p>1。在工程下新建一个Module<br><img src="http://p4qn5k2ck.bkt.clouddn.com/blog/180228/cHlDb08KGB.png?imageslim" alt="mark"></p><ul><li><p>选择自动创建配置文件，所需要的library一会咱们自己创建<br><img src="http://p4qn5k2ck.bkt.clouddn.com/blog/180228/LLE5lDDik4.png?imageslim" alt="mark"></p></li><li><p>填上Module的名称<br><img src="http://p4qn5k2ck.bkt.clouddn.com/blog/180228/KK07eIk3bL.png?imageslim" alt="mark"></p></li><li><p>在Module下创建一个lib文件夹用来存放所需要的jar包<br><img src="http://p4qn5k2ck.bkt.clouddn.com/blog/180228/baH0D34aLb.png?imageslim" alt="mark"></p></li><li><p>将jar包选中右键add as library创建一个library库<br><img src="http://p4qn5k2ck.bkt.clouddn.com/blog/180228/miG6KChhie.png?imageslim" alt="mark"></p><h4 id="接下来就是代码部分了"><a href="#接下来就是代码部分了" class="headerlink" title="接下来就是代码部分了"></a>接下来就是代码部分了</h4></li><li>首先需要引入dbproperties数据库的配置文件</li><li><p>配置spring-config.xml配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--设置自动扫描的包--&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;top.idalin&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--引入外部的属性文件--&gt;</span><br><span class="line">&lt;context:property-placeholder location=&quot;db.properties&quot;&gt;&lt;/context:property-placeholder&gt;</span><br><span class="line">    </span><br><span class="line"> &lt;!--配置数据源--&gt;</span><br><span class="line"> &lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">     &lt;property name=&quot;user&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">     &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">     &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbc.jdbcUrl&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">     &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;jdbc.driverClass&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line"> &lt;!--配置jdbcTemplate--&gt;</span><br><span class="line"> &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class="line">     &lt;!--设置DataSource属性--&gt;</span><br><span class="line">     &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>实体类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">public class Employee &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String lastName;</span><br><span class="line">    private String email;</span><br><span class="line">    private double salary;</span><br><span class="line">    private Integer deptId;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Employee&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, lastName=&apos;&quot; + lastName + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, email=&apos;&quot; + email + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, salary=&quot; + salary +</span><br><span class="line">                &quot;, deptId=&quot; + deptId +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getLastName() &#123;</span><br><span class="line">        return lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getSalary() &#123;</span><br><span class="line">        return salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getDeptId() &#123;</span><br><span class="line">        return deptId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setLastName(String lastName) &#123;</span><br><span class="line">        this.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSalary(double salary) &#123;</span><br><span class="line">        this.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDeptId(Integer deptId) &#123;</span><br><span class="line">        this.deptId = deptId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class Department &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Department&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>业务逻辑层EmployeeService</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public interface EmployeeService &#123;</span><br><span class="line"></span><br><span class="line">    public List&lt;Employee&gt; getEmployees();</span><br><span class="line"></span><br><span class="line">    public Employee getEmployee(int id);</span><br><span class="line"></span><br><span class="line">    void addEmployee(Employee employee);</span><br><span class="line"></span><br><span class="line">    void deleteEmployee(int id);</span><br><span class="line"></span><br><span class="line">    void updateEmployee(Employee employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>业务逻辑层的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@Service(&quot;employeeService&quot;)</span><br><span class="line">public class EmployeeServiceImpl implements EmployeeService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private EmployeeDao employeeDao;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Employee&gt; getEmployees() &#123;</span><br><span class="line">        return employeeDao.getEmployees();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Employee getEmployee(int id) &#123;</span><br><span class="line">        return employeeDao.getEmployee(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addEmployee(Employee employee) &#123;</span><br><span class="line">        employeeDao.addEmployee(employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void deleteEmployee(int id) &#123;</span><br><span class="line">        employeeDao.deleteEmployee(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void updateEmployee(Employee employee) &#123;</span><br><span class="line">        employeeDao.updateEmployee(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数据访问层</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public interface EmployeeDao &#123;</span><br><span class="line"></span><br><span class="line">    // 查询所有的员工信息的方法</span><br><span class="line">    public List&lt;Employee&gt; getEmployees();</span><br><span class="line"></span><br><span class="line">    public Employee getEmployee(int id);</span><br><span class="line"></span><br><span class="line">    void addEmployee(Employee employee);</span><br><span class="line"></span><br><span class="line">    void deleteEmployee(int id);</span><br><span class="line"></span><br><span class="line">    void updateEmployee(Employee employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数据访问层的实现(操作数据库)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@Repository(&quot;emplooyeeDao&quot;)</span><br><span class="line">public class EmployeeDaoImpl implements EmployeeDao&#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Employee&gt; getEmployees() &#123;</span><br><span class="line">        String sql = &quot;select * from employees&quot;;</span><br><span class="line">        RowMapper&lt;Employee&gt; rowMapper = new BeanPropertyRowMapper&lt;&gt;(Employee.class);</span><br><span class="line"></span><br><span class="line">        List&lt;Employee&gt; employees = jdbcTemplate.query(sql, rowMapper);</span><br><span class="line">        return employees;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Employee getEmployee(int id) &#123;</span><br><span class="line">        String sql = &quot;select * from employees where id = ?&quot;;</span><br><span class="line">        RowMapper&lt;Employee&gt; rowMapper = new BeanPropertyRowMapper&lt;&gt;(Employee.class);</span><br><span class="line">        Employee employee = jdbcTemplate.queryForObject(sql,rowMapper,id);</span><br><span class="line">        return employee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addEmployee(Employee employee) &#123;</span><br><span class="line">        // 创建SQL语句</span><br><span class="line">        String sql = &quot;insert into employees(last_name,email,salary,dept_id) values(?,?,?,?)&quot;;</span><br><span class="line">        jdbcTemplate.update(sql,employee.getLastName(),employee.getEmail(),employee.getSalary(),employee.getDeptId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void deleteEmployee(int id) &#123;</span><br><span class="line">        String sql = &quot;delete from employees where id = ?&quot;;</span><br><span class="line">        jdbcTemplate.update(sql,id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void updateEmployee(Employee employee) &#123;</span><br><span class="line">        String sql = &quot;update employees set last_name = ?,dept_id = ? where id = ?&quot;;</span><br><span class="line">        jdbcTemplate.update(sql,employee.getLastName(),employee.getDeptId(),employee.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><ul><li>分别测试查询所有员工、单个员工信息，增加员工信息，删除员工信息及修改员工信息的方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * spring与JdbcTemplate实现对数据库的增删改查</span><br><span class="line"> */</span><br><span class="line">public class Spring_TemplateTest &#123;</span><br><span class="line"></span><br><span class="line">    // 创建一个IOC容器</span><br><span class="line">    ApplicationContext ioc = new ClassPathXmlApplicationContext(&quot;spring-config.xml&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 测试查询所有员工的方法</span><br><span class="line">    @Test</span><br><span class="line">    public void testQueryAll() &#123;</span><br><span class="line">        EmployeeService employeeService = (EmployeeService) ioc.getBean(&quot;employeeService&quot;);</span><br><span class="line">        List&lt;Employee&gt; employees = employeeService.getEmployees();</span><br><span class="line">        for (Employee employee : employees) &#123;</span><br><span class="line">            System.out.println(employee);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 测试查询单个员工的方法</span><br><span class="line">    @Test</span><br><span class="line">    public void testQueryEmployee() &#123;</span><br><span class="line">        EmployeeService employeeService = (EmployeeService) ioc.getBean(&quot;employeeService&quot;);</span><br><span class="line">        Employee employee = employeeService.getEmployee(2);</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line">    // 测试增加一个员工的方法</span><br><span class="line">    @Test</span><br><span class="line">    public void testAddEmployee() &#123;</span><br><span class="line">        EmployeeService employeeService = (EmployeeService) ioc.getBean(&quot;employeeService&quot;);</span><br><span class="line">        Employee employee = new Employee();</span><br><span class="line">        employee.setLastName(&quot;zhaoliu&quot;);</span><br><span class="line">        employee.setEmail(&quot;zhaoliu@qq.com&quot;);</span><br><span class="line">        employee.setSalary(888.00);</span><br><span class="line">        employee.setDeptId(2);</span><br><span class="line">        employeeService.addEmployee(employee);</span><br><span class="line">    &#125;</span><br><span class="line">    // 测试删除一个员工的方法</span><br><span class="line">    @Test</span><br><span class="line">    public void testDeleteEmployee() &#123;</span><br><span class="line">        EmployeeService employeeService = (EmployeeService) ioc.getBean(&quot;employeeService&quot;);</span><br><span class="line">        employeeService.deleteEmployee(8);</span><br><span class="line">    &#125;</span><br><span class="line">    // 测试修改员工信息的方法</span><br><span class="line">    @Test</span><br><span class="line">    public void testUpdateEmployee() &#123;</span><br><span class="line">        EmployeeService employeeService = (EmployeeService) ioc.getBean(&quot;employeeService&quot;);</span><br><span class="line">        Employee employee = new Employee();</span><br><span class="line">        employee.setId(1);</span><br><span class="line">        employee.setLastName(&quot;admin&quot;);</span><br><span class="line">        employee.setDeptId(1);</span><br><span class="line">        employeeService.updateEmployee(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>需要注意的点： 1. jar包版本的问题！！ 2.sql语句不要写错！！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Spring中有很多概念性的内容，需要我们去花些时间去搞懂，这里只列出Spring的大纲，网上有很多写的很详细的文章，不再赘述&lt;br&gt; IOC ：&lt;a href=&quot;http://blog.csdn.net/qq_22654611/article/d
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
      <category term="jdbcTemplate" scheme="http://yoursite.com/categories/Spring/jdbcTemplate/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="jdbcTemplate" scheme="http://yoursite.com/tags/jdbcTemplate/"/>
    
  </entry>
  
  <entry>
    <title>Idea下创建Spring的HelloWorld项目</title>
    <link href="http://yoursite.com/2018/02/25/Idea%E4%B8%8B%E5%88%9B%E5%BB%BASpring%E7%9A%84HelloWorld%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2018/02/25/Idea下创建Spring的HelloWorld项目/</id>
    <published>2018-02-25T15:50:48.000Z</published>
    <updated>2018-02-26T07:20:01.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Spring的概述"><a href="#一、Spring的概述" class="headerlink" title="一、Spring的概述"></a>一、Spring的概述</h2><ul><li>1.Spring是一个开源的框架</li><li>2.Spring为简化企业级开发而生，使用Spring,JavaBean就可以完成很多以前要靠EJB才能实现的功能，同样的功能，在EJB中要通过繁琐的配置和复杂的代码才能实现，而在Spring中却非常的简介优雅。</li><li>3.Spring是一个IOC(DI)和AOP容器框架(后面会详细说IOC及AOP的概念)</li><li>4.Spring的优良特性<ul><li>1&gt; 非侵入性: 基于Spring开发的应用中的对象可以不依赖于Spring的API</li><li>2&gt; 依赖注入: DI（Dependency Injection）,控制反转(IOC)最经典的实现</li><li>3&gt; 面向切面编程: AOP(Aspect Oriented Programming)</li><li>4&gt; 容器: Spring是一个容器，因为它包含并且管理应用对象的生命周期</li><li>5&gt; 组件化: Spring实现了使用简单的组件配置组合成一个复杂的应用。<ul><li>在spring中年可以使用XML和Java注解组合这些对象</li></ul></li><li>6&gt; 一站式: 在IOC和AOP的基础上可以整合各种企业应用的开源框架和优秀的第三方类库(实际上Spring自身也提供了表述层的SpringMVC和持久化层的Spring JDBC)</li></ul></li><li>5.Spring模块</li></ul><p><img src="http://p4qn5k2ck.bkt.clouddn.com/blog/180226/Fjc06bhmeA.png?imageslim" alt="spring模块信息"></p><h2 id="二、HelloWorld"><a href="#二、HelloWorld" class="headerlink" title="二、HelloWorld"></a>二、HelloWorld</h2><blockquote><p>环境：</p><p>Idea 2017.3.2</p><p>JDK 1.8.0</p><ul><li>项目中需要使用的jar包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">commons-logging-1.2.jar</span><br><span class="line">spring-beans-5.0.0.RELEASE.jar</span><br><span class="line">spring-context-5.0.0.RELEASE.jar</span><br><span class="line">spring-core-5.0.0.RELEASE.jar</span><br><span class="line">spring-expression-5.0.0.RELEASE.jar</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>1.创建一个java工程<ul><li>注意下面选择set up library later自己创建lib文件夹<br><img src="http://p4qn5k2ck.bkt.clouddn.com/blog/180226/e45mldjcjk.png?imageslim" alt="创建一个Project"></li></ul></li><li><ol><li>创建一个Module模块<br><img src="http://p4qn5k2ck.bkt.clouddn.com/blog/180226/DJ7EfFm9HI.png?imageslim" alt="创建一个Module3"></li></ol></li><li><ol><li>在Module下创建一个lib文件夹，将需要用到的jar包添加到该文件夹下</li></ol><ul><li>并且将jar包add到library下<br><img src="http://p4qn5k2ck.bkt.clouddn.com/blog/180226/9kdCEeLmbg.png?imageslim" alt="创建一个lib文件夹"><br><img src="http://p4qn5k2ck.bkt.clouddn.com/blog/180226/3fmI23a003.png?imageslim" alt="将jar包build到Module中"></li></ul></li><li><ol><li>接下来就是创建Bean的实力类以配置spring-config.xml配置文件了</li></ol></li><li><p>创建Student类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line">    private Integer id;  // 学生的id</span><br><span class="line">    private String name; // 学生的姓名</span><br><span class="line">    private String age; // 学生的年龄</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(Integer id, String name, String age) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(String age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, age=&apos;&quot; + age + &apos;\&apos;&apos; +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在spring-config.xml配置文件中配置Student类，并给属性赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置Student类--&gt;</span><br><span class="line">&lt;bean id=&quot;student&quot; class=&quot;top.idalin.bean.Student&quot;&gt;</span><br><span class="line">    &lt;!--对Student类中的属性进行配置--&gt;</span><br><span class="line">    &lt;property name=&quot;id&quot; value=&quot;1&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;dalin&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;age&quot; value=&quot;18&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><ol><li>创建测试类<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class TestStudent &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建一个spring的IOC容器</span><br><span class="line">     * 其中Application是一个接口</span><br><span class="line">     * ClassPathXmlApplicationContext是ApplicationContext子接口的实现类，这是一个典型的多态的体现</span><br><span class="line">     * 方法参数就是spring-config.xml配置文件</span><br><span class="line">     */</span><br><span class="line">    ApplicationContext ioc =</span><br><span class="line">            new ClassPathXmlApplicationContext(&quot;spring-config.xml&quot;);</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testStudent() &#123;</span><br><span class="line">        // 通过ioc调用getBean()方法，创建一个Student对象</span><br><span class="line">        // 参数是在spring-config.xml文件中bean的id值</span><br><span class="line">        Student stu = (Student) ioc.getBean(&quot;student&quot;);</span><br><span class="line">        // 打印stu，注意： 这时打印的stu对象是已经给对象中属性赋值了</span><br><span class="line">        System.out.println(stu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>测试成功，控制台打印出已经给属性赋值的对象<br><img src="http://p4qn5k2ck.bkt.clouddn.com/blog/180226/mgjFi43LdG.png?imageslim" alt="控制台成功打印stu对象"></p></li></ul><h3 id="注意-这里有个idea的使用小技巧"><a href="#注意-这里有个idea的使用小技巧" class="headerlink" title="注意: (这里有个idea的使用小技巧)"></a>注意: (这里有个idea的使用小技巧)</h3><ul><li>这里没有引入Test 的jar包，程序会报错</li><li>怎么想eclipse中Alt + 斜杠来提示信息呢？？需要配置一下Idea的快捷键<br><img src="http://p4qn5k2ck.bkt.clouddn.com/blog/180226/D2eCj24dhj.png?imageslim" alt="skill"><br>配置好了之后，导入Junit的jar包，这时在lib文件夹下会多了两个jar包</li><li>hamcrest-core-1.3.jar</li><li><p>junit-4.12.jar</p></li><li><p>至此，Spring的HelloWorld算是完成了，接下来就是一步一步的研究Spring中的属性及配置了</p></li></ul><blockquote><p>点击查看项目的源码 <a href="https://github.com/Moneylq/Spring/tree/master/springHelloWorld" target="_blank" rel="noopener">SpringHelloWorld</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Spring的概述&quot;&gt;&lt;a href=&quot;#一、Spring的概述&quot; class=&quot;headerlink&quot; title=&quot;一、Spring的概述&quot;&gt;&lt;/a&gt;一、Spring的概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.Spring是一个开源的框架&lt;/li&gt;
&lt;li&gt;2.
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/java/Spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>vue2.0的login跳转的栗子</title>
    <link href="http://yoursite.com/2018/02/19/vue2.0%E7%9A%84login%E8%B7%B3%E8%BD%AC%E7%9A%84%E6%A0%97%E5%AD%90/"/>
    <id>http://yoursite.com/2018/02/19/vue2.0的login跳转的栗子/</id>
    <published>2018-02-18T16:25:23.000Z</published>
    <updated>2018-02-18T16:27:56.604Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>需要解决的问题：</strong><br>store存储登录状态<br>Vue-Router导航钩子拦截路由<br>Vue-Resource获取后台的数据<br>需要判断登录返回的user<br><a href="https://github.com/Moneylq/Vuex-Vue-Router--Login" target="_blank" rel="noopener">源码参考</a></p></blockquote><p><strong>主要技术栈：Vuex + Vue-Resource + Vue-Router</strong><br><strong>后台用mock-data来模拟数据。</strong></p><hr><p>先来看一下效果图</p><p><img src="http://upload-images.jianshu.io/upload_images/3719119-238d935395ef3185.gif?imageMogr2/auto-orient/strip" alt="Login.gif"></p><p><strong>第一步、起个项目</strong>打开控制台输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --global vue-cli#创建一个自己的基于webpack的新项目</span><br><span class="line">$ vue init webpack my-project(这里是你自己的工程名)</span><br><span class="line">$ cd my-project(进到你的工程文件夹下)</span><br><span class="line">$ npm install (安装依赖)</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure></p><p>注意：起工程的时候回让你选择ESLint,Test等等各种测试，这里都默认选no就可以。<br><img src="http://upload-images.jianshu.io/upload_images/3719119-1c32c822c56e1f9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="注意控制台中的测试要选取消"><br>现在你的项目应该跑起来了。打开控制台输入<figure class="highlight plain"><figcaption><span>run dev```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">应该是这样的。</span><br><span class="line">![起项目成功](http://upload-images.jianshu.io/upload_images/3719119-4c3b79a2dafd8ca8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line">好了起项目成功了，接下来撸起袖子加油干吧。</span><br><span class="line">先来看一下项目结构:![项目结构](http://upload-images.jianshu.io/upload_images/3719119-035161f254838451.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line">**第二步、配置一下mock-data。**</span><br><span class="line">``` </span><br><span class="line">&#123;</span><br><span class="line">&quot;users&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;id&quot; : 1,</span><br><span class="line">&quot;username&quot;: &quot;aaa&quot;,</span><br><span class="line">&quot;password&quot;: &quot;aaa&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;id&quot; : 2,</span><br><span class="line">&quot;username&quot;: &quot;bbb&quot;,</span><br><span class="line">&quot;password&quot;: &quot;bbb&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;id&quot;: 3,</span><br><span class="line">&quot;username&quot;: &quot;ccc&quot;,</span><br><span class="line">&quot;password&quot;: &quot;ccc&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>这里给指定了三个用户名和密码，在login登陆的时候只有输入正确的用户名和密码才可以登陆实现页面的跳转。</em><br><strong>第三步 配置view视图层</strong>Login.vue文件中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">name:&apos;&apos;,</span><br><span class="line">pwd:&apos;&apos;,</span><br><span class="line">error:&apos;&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">user() &#123;</span><br><span class="line">return this.$store.state.user</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">isLogin:function() &#123;</span><br><span class="line">this.$http.get(&apos;http://localhost:3000/users?username=&apos;+this.name+&apos;&amp;password=&apos;+this.pwd).then((response) =&gt; &#123; </span><br><span class="line">//这里在isLogin方法中先判断一下后台返回的是否为空值，如果不是然后提交后台返回的值。</span><br><span class="line">//注意这里是个难点，Vuex与Vue-Resource结合使用。 </span><br><span class="line">if(response.body != null &amp; response.body.length &gt; 0)&#123; </span><br><span class="line">this.$store.commit(&apos;isLogin&apos;,response.body[0]);</span><br><span class="line">this.name=&apos;&apos;</span><br><span class="line">this.pwd= &apos;&apos;</span><br><span class="line">this.$router.push(&#123; path: &apos;main&apos; &#125;) </span><br><span class="line">&#125;else&#123;</span><br><span class="line">alert(&apos;请输入正确的用户名和密码！！！&apos;);</span><br><span class="line">this.name=&apos;&apos;</span><br><span class="line">this.pwd= &apos;&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;).then((error)=&gt; this.error = error)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>接下来是Main.vue ,这个页面很简单，简单的写一些内容作为测试是否登录跳转成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;Hello Main！&lt;/h1&gt;</span><br><span class="line">&lt;section v-show=&quot;user&quot;&gt;</span><br><span class="line">&lt;!-- 这里的user是从下面JavaScript的computed的user()方法中得到的。 --&gt;</span><br><span class="line">&lt;p&gt;欢迎&#123;&#123;user.username&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">computed: &#123;</span><br><span class="line">user()&#123;</span><br><span class="line"> //因为在main.js中已经全局注册了store，所以这里直接用this.$直接使用。</span><br><span class="line">return this.$store.state.user</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>下面来配置一下路由。routes.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//先引入需要路由的文件</span><br><span class="line">import Main from &apos;../components/Main&apos;</span><br><span class="line">import Login from &apos;../components/Login&apos;</span><br><span class="line"></span><br><span class="line">export default [</span><br><span class="line">&#123;</span><br><span class="line">path: &apos;/login&apos;,</span><br><span class="line">component: Login</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">path: &apos;/main&apos;, </span><br><span class="line">meta: &#123;</span><br><span class="line">// 添加该字段，表示进入这个路由是需要登录的</span><br><span class="line"> requireAuth: true,  </span><br><span class="line">&#125;,           </span><br><span class="line">component: Main,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>接下来是main.js(这里只对重点拿出来细说)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 全局导航钩子</span><br><span class="line"> router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line"> // 判断该路由是否需要登录权限</span><br><span class="line"> if (to.meta.requireAuth) &#123;</span><br><span class="line"> // 通过vuex state获取当前的token是否存在</span><br><span class="line"> // console.log(isEmptyObject(store.state.user)) </span><br><span class="line"> if(!isEmptyObject(store.state.user)) &#123;   </span><br><span class="line"> next();</span><br><span class="line"> &#125;</span><br><span class="line"> else &#123; </span><br><span class="line"> next(&#123;</span><br><span class="line"> path: &apos;/login&apos;,</span><br><span class="line">                query: &#123;redirect: to.fullPath&#125;  // 将跳转的路由path作为参数，登录成功后跳转到该路由</span><br><span class="line">            &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> else &#123;</span><br><span class="line"> next();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> function isEmptyObject(obj) &#123;</span><br><span class="line"> for (var key in obj) &#123;</span><br><span class="line"> return false;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>重点参考链接<br>路由拦截导航。<a href="http://www.tuicool.com/articles/JRJFN3N" target="_blank" rel="noopener">路由拦截</a><br>JavaScipt中判断对象是否为空。<a href="http://www.68idc.cn/help/makewebs/javascript/20150613365336.html" target="_blank" rel="noopener">点击这里</a></p></blockquote><hr><p>存在的问题及待解决的问题： 登陆数据存在store中，每次刷新页面都会没有了。接下来要用LocalStorage或者Cookie来保存数据。</p><p><a href="https://github.com/Moneylq/Vuex-Vue-Router--Login" target="_blank" rel="noopener">源码参考</a></p><hr><p>欢迎大神纠察指正，也希望前端爱好者提出宝贵意见，一起学习，一块交流讨论。喜欢的话请点个赞吧。（感谢阅读）</p><blockquote><p>原文链接： <a href="https://www.jianshu.com/p/56448a7c565d" target="_blank" rel="noopener">Vue2.0一个login跳转实例</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;需要解决的问题：&lt;/strong&gt;&lt;br&gt;store存储登录状态&lt;br&gt;Vue-Router导航钩子拦截路由&lt;br&gt;Vue-Resource获取后台的数据&lt;br&gt;需要判断登录返回的user&lt;br&gt;&lt;a href=&quot;https://g
      
    
    </summary>
    
      <category term="vue2.0" scheme="http://yoursite.com/categories/vue2-0/"/>
    
      <category term="web" scheme="http://yoursite.com/categories/vue2-0/web/"/>
    
    
      <category term="vue2.0" scheme="http://yoursite.com/tags/vue2-0/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
</feed>
